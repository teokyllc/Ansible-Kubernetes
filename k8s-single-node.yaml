---
- name: Single node Kubernetes
  hosts: single
  gather_facts: True
  become: True
  vars:
    hostname: k8s
    vault_addr: "{{ lookup('ansible.builtin.env', 'VAULT_ADDR') }}"
    vault_token: "{{ lookup('ansible.builtin.env', 'VAULT_TOKEN') }}"
    kubernetes_fqdn: kubernetes.teokyllc.internal
    kubernetes_pod_cidr: 10.244.0.0/16
    metallb_namespace: metallb-system
    metallb_ip_range: 192.168.1.240-192.168.1.250
    cert_manager_namespace: cert-manager
    actions_runner_controller_namespace: actions-runner-system

  tasks:
    - name: Set a hostname
      ansible.builtin.hostname:
        name: "{{ hostname }}"

    - name: Add Hashicorp GPG key
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        state: present

    - name: Add Hashicorp Repository
      apt_repository:
        repo: deb https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main
        state: present
        filename: hashi
        mode: 0600

    - name: Update packages
      ansible.builtin.apt:
        name: "*"
        state: latest
        update_cache: yes

    - name: Install packages
      ansible.builtin.apt:
        pkg:
        - apt-transport-https
        - containerd
        - curl
        - python3-pip
        - vault

    - name: Add CA cert to trust store
      ansible.builtin.shell: |
        export VAULT_ADDR={{ vault_addr }}
        export VAULT_TOKEN={{ vault_token }}
        vault kv get -mount=kv -field=AD-CA cert > /usr/local/share/ca-certificates/root-ca.crt
        vault kv get -mount=kv -field=vault-int-ca cert > /usr/local/share/ca-certificates/intermediate-ca.crt
        update-ca-certificates

    - name: Install Python yaml
      ansible.builtin.pip:
        name: pyyaml
        executable: pip3

    - name: Copy kernel modules
      ansible.builtin.copy:
        src: files/k8s-modules.conf
        dest: /etc/modules-load.d/k8s-modules.conf

    - name: Load kernal modules
      ansible.builtin.shell: |
        modprobe br_netfilter 
        modprobe overlay

    - name: Copy kernel parameters
      ansible.builtin.copy:
        src: files/k8s-kernel-params.conf
        dest: /etc/sysctl.d/k8s.conf

    - name: Reload sysctl
      ansible.builtin.shell: |
        sysctl --system

    - name: Make the Swap inactive
      command: swapoff -a
      
    - name: Remove Swap entry from /etc/fstab
      lineinfile:
        dest: /etc/fstab
        regexp: swap
        state: absent

    - name: Create a directory for containerd
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Create containerd config
      ansible.builtin.shell: |
        containerd config default | tee /etc/containerd/config.toml 
        sed -i "s/SystemdCgroup = false/SystemdCgroup = true/g" /etc/containerd/config.toml

    - name: Restart containerd
      ansible.builtin.systemd:
        state: restarted
        name: containerd
        enabled: yes

    - name: Add Google official GPG key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes Repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main 
        state: present
        filename: kubernetes
        mode: 0600

    - name: Install Kubernetes packages
      ansible.builtin.apt:
        state: latest
        update_cache: yes
        pkg:
        - kubeadm
        - kubelet
        - kubectl

    - name: Add Helm GPG key
      apt_key:
        url: https://baltocdn.com/helm/signing.asc
        state: present

    - name: Add Helm Repository
      apt_repository:
        repo: deb https://baltocdn.com/helm/stable/debian/ all main
        state: present
        filename: helm
        mode: 0600

    - name: Install Helm
      ansible.builtin.apt:
        state: latest
        update_cache: yes
        pkg:
        - helm

    - name: Place hold on packages
      ansible.builtin.shell: |
        apt-mark hold kubelet kubeadm kubectl

    - name: Check if kubeadm init has been run
      stat:
        path: /root/k8s-init
      register: kubeadm_init_result

    - name: Deploy Kubernetes
      ansible.builtin.shell: |
        kubeadm init --pod-network-cidr={{ kubernetes_pod_cidr }} --control-plane-endpoint={{ kubernetes_fqdn }} > /root/k8s-init
        export VAULT_ADDR={{ vault_addr }}
        export VAULT_TOKEN={{ vault_token }}
        vault write -tls-skip-verify kv/kubeconfig kubeconfig=@/etc/kubernetes/admin.conf
      when: not kubeadm_init_result.stat.exists

    - name: Untaint master node
      ansible.builtin.shell: |
        export KUBECONFIG=/etc/kubernetes/admin.conf
        kubectl taint node k8s node-role.kubernetes.io/control-plane:NoSchedule-
      when: not kubeadm_init_result.stat.exists

    - name: Deploy Flannel CNI
      ansible.builtin.shell: |
        export KUBECONFIG=/etc/kubernetes/admin.conf
        kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

    - name: Enable strict ARP mode
      ansible.builtin.shell: |
        export KUBECONFIG=/etc/kubernetes/admin.conf
        kubectl get configmap kube-proxy -n kube-system -o yaml | sed -e "s/strictARP: false/strictARP: true/" | kubectl apply -f - -n kube-system

    - name: Add Metal LB chart repo
      kubernetes.core.helm_repository:
        name: metallb
        repo_url: "https://metallb.github.io/metallb"

    - name: Deploy Metal LB
      kubernetes.core.helm:
        name: metallb
        chart_ref: metallb/metallb
        release_namespace: "{{ metallb_namespace }}"
        create_namespace: true
        kubeconfig: /etc/kubernetes/admin.conf
        wait: yes

    - name: Create Metal LB IP Address Pool
      ansible.builtin.shell: |
        sleep 60
        export KUBECONFIG=/etc/kubernetes/admin.conf
        cat <<EOF | kubectl apply -f -
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: ip-pool
          namespace: metallb-system
        spec:
          addresses:
          - {{ metallb_ip_range }}
        ---
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: l2advertisement
          namespace: metallb-system
        EOF

    - name: Add cert-manager chart repo
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: "https://charts.jetstack.io"

    - name: Deploy cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: "{{ cert_manager_namespace }}"
        create_namespace: true
        kubeconfig: /etc/kubernetes/admin.conf
        wait: yes
        values:
          installCRDs: "true"

    - name: Add Actions Runner Controller chart repo
      kubernetes.core.helm_repository:
        name: actions-runner-controller
        repo_url: "https://actions-runner-controller.github.io/actions-runner-controller"

    - name: Deploy Actions Runner Controller
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: actions-runner-controller/actions-runner-controller
        release_namespace: "{{ actions_runner_controller_namespace }}"
        create_namespace: true
        kubeconfig: /etc/kubernetes/admin.conf
        wait: yes
        values:
          authSecret: 
            enabled: true
            create: true
            github_token: true
          image:
            actionsRunnerRepositoryAndTag: ""
            actionsRunnerImagePullSecrets: ""



    - name: Reboot all the kubernetes nodes.
      reboot:
        reboot_timeout: 180
        connect_timeout: 10
        test_command: uptime